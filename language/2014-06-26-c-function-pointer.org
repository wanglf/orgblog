#+TITLE:  "C语言函数指针与指针函数"
#+AUTHOR: wanglifeng
#+OPTIONS: H:4 ^:nil
#+LATEX_CLASS: latex-doc
#+PAGE_TAGS: c
#+PAGE_CATETORIES: language
#+PAGE_LAYOUT: post

#+HTML: <!--abstract-begin-->
本文讲述C语言函数指针与指针函数的用法
#+HTML: <!--abstract-end-->

* 函数指针
** 函数指针示例一

#+BEGIN_SRC c
#include<stdio.h>

typedef int (*FP_CALC)(int, int);
/* 注意这里不是函数声明而是函数定义，它是一个地址，你可以直接输出add看看  */
int add(int a, int b)
{
     return a + b;
}
int sub(int a, int b)
{
     return a - b;
}
int mul(int a, int b)
{
     return a * b;
}
int div(int a, int b)
{
     return b? a/b : -1;
}

/* 定义一个函数，参数为op，返回一个指针。该指针类型为 拥有两个int参数、
 * 返回类型为int 的函数指针。它的作用是根据操作符返回相应函数的地址
 */

FP_CALC calc_func(char op)
{
     switch (op)
     {
     case '+': return add; /* 返回函数的地址   */
     case '-': return sub;
     case '*': return mul;
     case '/': return div;
     default:
         return NULL;
     }
     return NULL;
}

/* s_calc_func为函数，它的参数是 op，
 * 返回值为一个拥有 两个int参数、返回类型为int 的函数指针
 */

int (*s_calc_func(char op)) (int, int)
{
     return calc_func(op);
}

/* 最终用户直接调用的函数，该函数接收两个int整数，和一个算术运算符，返回两数的运算结果   */

int calc(int a, int b, char op)
{
     FP_CALC fp = calc_func(op); /* 根据预算符得到各种运算的函数的地址   */
         int (*s_fp)(int, int) = s_calc_func(op); /*用于测试   */
         // ASSERT(fp == s_fp);   /* 可以断言这俩是相等的   */
     if (fp) return fp(a, b); /* 根据上一步得到的函数的地址调用相应函数，并返回结果 */
     else return -1;
}

void main()
{
    int a = 100, b = 20;

     printf("calc(%d, %d, %c) = %d\n", a, b, '+', calc(a, b, '+'));
     printf("calc(%d, %d, %c) = %d\n", a, b, '-', calc(a, b, '-'));
     printf("calc(%d, %d, %c) = %d\n", a, b, '*', calc(a, b, '*'));
     printf("calc(%d, %d, %c) = %d\n", a, b, '/', calc(a, b, '/'));
}
#+END_SRC


** 函数指针示例二

#+BEGIN_SRC c
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>

/** Our old friend die from ex17. */

void die(const char *message)
{
    if(errno) {
        perror(message);
    } else {
        printf("ERROR: %s\n", message);
    }

    exit(1);
}

/* a typedef creates a fake type, in this case for a function pointer */
typedef int (*compare_cb)(int a, int b);

/**
 * A classic bubble sort function that uses the 
 * compare_cb to do the sorting. 
 */
int *bubble_sort(int *numbers, int count, compare_cb cmp)
{
    int temp = 0;
    int i = 0;
    int j = 0;
    int *target = malloc(count * sizeof(int));

    if(!target) die("Memory error.");

    memcpy(target, numbers, count * sizeof(int));

    for(i = 0; i < count; i++) {
        for(j = 0; j < count - 1; j++) {
            if(cmp(target[j], target[j+1]) > 0) {
                temp = target[j+1];
                target[j+1] = target[j];
                target[j] = temp;
            }
        }
    }

    return target;
}

int sorted_order(int a, int b)
{
    return a - b;
}

int reverse_order(int a, int b)
{
    return b - a;
}

int strange_order(int a, int b)
{
    if(a == 0 || b == 0) {
        return 0;
    } else {
        return a % b;
    }
}

/** 
 * Used to test that we are sorting things correctly
 * by doing the sort and printing it out.
 */

void test_sorting(int *numbers, int count, compare_cb cmp)
{
    int i = 0;
    int *sorted = bubble_sort(numbers, count, cmp);

    if(!sorted) die("Failed to sort as requested.");

    for(i = 0; i < count; i++) {
        printf("%d ", sorted[i]);
    }
    printf("\n");

    free(sorted);
}


int main(int argc, char *argv[])
{
    if(argc < 2) die("USAGE: ex18 4 3 1 5 6");

    int count = argc - 1;
    int i = 0;
    char **inputs = argv + 1;

    int *numbers = malloc(count * sizeof(int));
    if(!numbers) die("Memory error.");

    for(i = 0; i < count; i++) {
        numbers[i] = atoi(inputs[i]);
    }

    test_sorting(numbers, count, sorted_order);
    test_sorting(numbers, count, reverse_order);
    test_sorting(numbers, count, strange_order);

    free(numbers);

    return 0;
}
#+END_SRC
