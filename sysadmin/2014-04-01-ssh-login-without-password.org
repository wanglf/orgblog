#+TITLE:  "SSH免密码登录"
#+AUTHOR: wanglifeng
#+OPTIONS: H:4 ^:nil
#+LATEX_CLASS: latex-doc
#+PAGE_TAGS: ssh
#+PAGE_CATETORIES: sa
#+PAGE_LAYOUT: post

#+HTML: <!--abstract-begin-->
SSH每次登录需输入口令，是不是很烦呢？且看这里...
#+HTML: <!--abstract-end-->

* 需求分析

以CentOS为例, 有机器A(192.168.1.1)，B(192.168.2.1)，现A机希望通过ssh免密码登录B机。

* 配置步骤

** A机生成公钥/私钥对

#+BEGIN_EXAMPLE
[user@A ~]$ ssh-keygen -t rsa -P ''
#+END_EXAMPLE

 -P表示密码，-P '' 就表示空密码，也可以不用-P参数，这样就要三车回车，用-P就一次回车。 它在/home/user下生成.ssh目录，.ssh下有id_rsa和id_rsa.pub。

** 复制公钥至远端机

#+BEGIN_EXAMPLE
[user@A ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub  user@192.168.2.1
#+END_EXAMPLE
由于此时还未做到免密码登录，需手工输入B机密码。

** 测试免密码登录

#+BEGIN_EXAMPLE
[user@A ~]$ ssh user@192.168.2.1
The authenticity of host '192.168.2.1 (192.168.2.1)' can't be established.
RSA key fingerprint is 00:a6:a8:87:eb:c7:40:10:39:cc:a0:eb:50:d9:6a:5b.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.2.1' (RSA) to the list of known hosts.
Last login: Thu Jul  3 09:53:18 2008 from user
[user@B ~]$
#+END_EXAMPLE

第一次登录需要输入yes。
小结：登录的机子有私钥，被登录的机子要有登录机子的公钥。这个公钥/私钥对一般在私钥宿主机产生。
上面是用rsa算法的公钥/私钥对，当然也可以用dsa(对应的文件是id_dsa，id_dsa.pub)。

* 常见问题

** Agent admitted failure to sign using the key.

#+BEGIN_SRC sh
ssh-add   ~/.ssh/id_rsa
#+END_SRC

** 客户端登录服务器慢

客户端：
vi /etc/ssh/ssh_config
#+BEGIN_EXAMPLE
GSSAPIAuthentication no
#+END_EXAMPLE

服务器端：
vi /etc/ssh/sshd_config
#+BEGIN_EXAMPLE
UseDNS no
#+END_EXAMPLE

** SELINUX 阻挡登录

#+BEGIN_SRC sh
sed -i s/SELINUX=enforcing/SELINUX=disabled/g /etc/selinux/config
#+END_SRC


* 最新方法
#+BEGIN_SRC sh
ssh-copy-id -i username@serverip
#+END_SRC

实际上是将本地的id_rsa.pub追加至远端的authorized_keys并对应修改远端文件的权限。

=以下说明来自ssh-copy-id的manual=

#+BEGIN_EXAMPLE
 ssh-copy-id is a script that uses ssh(1) to log into a remote machine (presumably
     using a login password, so password authentication should be enabled, unless
     you've done some clever use of multiple identities).  It assembles a list of one
     or more fingerprints (as described below) and tries to log in with each key, to
     see if any of them are already installed (of course, if you are not using
     ssh-agent(1) this may result in you being repeatedly prompted for pass-phrases).
     It then assembles a list of those that failed to log in, and using ssh, enables
     logins with those keys on the remote server.  By default it adds the keys by
     appending them to the remote user's ~/.ssh/authorized_keys (creating the file, and
     directory, if necessary).  It is also capable of detecting if the remote system is
     a NetScreen, and using its ‘set ssh pka-dsa key ...’ command instead.
#+END_EXAMPLE
